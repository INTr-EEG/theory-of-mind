<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.4">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s_%s' % (expInfo['participant'],expInfo['School'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'School': '', 'Audio': &quot;['Yes', 'No']&quot;, 'Debug': &quot;['No', 'Yes']&quot;, 'Show boxes': &quot;['No', 'Yes']&quot;}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="['resources/imgs/slides/slide-03b.png', 'resources/seqs/conditions.csv', 'resources/imgs/slides/slide-00-intr.png', 'resources/imgs/slides/slide-00-title.png', 'resources/imgs/slides/slide-01.png', 'resources/imgs/slides/slide-02.png', 'resources/imgs/slides/slide-03.png', 'resources/imgs/slides/slide-03b.png', 'resources/imgs/slides/slide-04.png', 'resources/imgs/slides/slide-05.png', 'resources/imgs/slides/slide-06.png', 'resources/imgs/slides/slide-07.png', 'resources/imgs/slides/slide-08.png', 'resources/imgs/slides/slide-09.png', 'resources/imgs/slides/slide-10.png', 'resources/imgs/slides/slide-11.png', 'resources/imgs/slides/slide-12.png', 'resources/imgs/slides/slide-13.png', 'resources/imgs/slides/slide-14.png', 'resources/imgs/slides/slide-15.png', 'resources/imgs/slides/slide-16.png', 'resources/imgs/slides/slide-17.png', 'resources/imgs/slides/slide-18.png', 'resources/imgs/slides/slide-19.png', 'resources/imgs/slides/slide-20.png', 'resources/imgs/slides/slide-21.png', 'resources/imgs/slides/slide-22.png', 'resources/imgs/slides/slide-23.png', 'resources/imgs/slides/slide-24.png', 'resources/imgs/next.png', 'resources/aud/slide-00-intr.m4a', 'resources/aud/slide-00-title.m4a', 'resources/aud/slide-01.m4a', 'resources/aud/slide-02.m4a', 'resources/aud/slide-03.m4a', 'resources/aud/slide-03b.m4a', 'resources/aud/slide-04.m4a', 'resources/aud/slide-05.m4a', 'resources/aud/slide-06.m4a', 'resources/aud/slide-06b.m4a', 'resources/aud/slide-07.m4a', 'resources/aud/slide-08.m4a', 'resources/aud/slide-10.m4a', 'resources/aud/slide-11.m4a', 'resources/aud/slide-12.m4a', 'resources/aud/slide-13.m4a', 'resources/aud/slide-14.m4a', 'resources/aud/slide-15.m4a', 'resources/aud/slide-16.m4a', 'resources/aud/slide-17.m4a', 'resources/aud/slide-18.m4a', 'resources/aud/slide-19.m4a', 'resources/aud/slide-20.m4a', 'resources/aud/slide-21.m4a', 'resources/aud/slide-22.m4a', 'resources/aud/slide-23.m4a', 'resources/aud/slide-24.m4a']" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1680, 1050]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="white" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="theory-of-mind" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="trial_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;y_offset = -0.02&amp;#10;control_scores = []&amp;#10;current_total_score = 0&amp;#10;&amp;#10;#SLIDE_GROUPS = [&amp;#10;#    None,&amp;#10;#    [1, 2],&amp;#10;#    [3],&amp;#10;#    [4, 5],&amp;#10;#    [6,7, 8, 9, 10, 11],&amp;#10;#    [12],&amp;#10;#    [13],&amp;#10;#    [14, 15, 16, 17, 18],&amp;#10;#    [19],&amp;#10;#    [20],&amp;#10;#    [21, 22],&amp;#10;#    [23],&amp;#10;#    [24],&amp;#10;#]&amp;#10;&amp;#10;SLIDE_GROUPS = [&amp;#10;    None,&amp;#10;    [1, 2],#trial 1&amp;#10;    [3], #trial 2&amp;#10;    [301],#trial number 3, code for its slide name 3b&amp;#10;    [4, 5], &amp;#10;    [6,7, 8, 9, 10, 11],&amp;#10;    [12],&amp;#10;    [13],&amp;#10;    [14, 15, 16, 17, 18],&amp;#10;    [19],&amp;#10;    [20],&amp;#10;    [21, 22],&amp;#10;    [23],&amp;#10;    [24],&amp;#10;]" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="y_offset = (- 0.02);&amp;#10;control_scores = [];&amp;#10;current_total_score = 0;&amp;#10;SLIDE_GROUPS = [null, [1, 2], [3], [301], [4, 5], [6, 7, 8, 9, 10, 11], [12], [13], [14, 15, 16, 17, 18], [19], [20], [21, 22], [23], [24]];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="trials.addData(&quot;expVersion&quot;, expVersion);&amp;#10;cimgs = null;&amp;#10;cimg_names = [];&amp;#10;mouse_over = &quot;_&quot;;&amp;#10;slide_t = 0;&amp;#10;response = null;&amp;#10;response_time = null;&amp;#10;slide_name = &quot;&quot;;&amp;#10;slide_nums = SLIDE_GROUPS[Number.parseInt(trialNum)];&amp;#10;slides = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = slide_nums, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    i = ((i &gt; 9) ? i : `0${i}`);&amp;#10;    if ((i === 301)) {&amp;#10;        i = &quot;03b&quot;;&amp;#10;    }&amp;#10;    slide_name = `slide-${i}`;&amp;#10;    slides.push(make_slide(slide_name));&amp;#10;}&amp;#10;n_slides = slide_nums.length;&amp;#10;idx = 0;&amp;#10;idx_prev = null;&amp;#10;slides[idx].autoDraw = true;&amp;#10;NEXT_BUTTON.pos = NEXT_BUTTON_POS;&amp;#10;NEXT_BUTTON.opacity = ((n_slides &gt; 1) ? 1 : 0.1);&amp;#10;NEXT_BUTTON.autoDraw = true;&amp;#10;if (USE_AUDIO) {&amp;#10;    play_6b_once = true;&amp;#10;    auto_9_once = true;&amp;#10;    aud_file = `${AUD_DIR}/${slides[idx].name}.m4a`;&amp;#10;    SOUND = make_sound(slides[idx].name, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND_T = 0;&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;for (var qn_num, _pj_c = 0, _pj_a = [2, 6, 7], _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    qn_num = _pj_a[_pj_c];&amp;#10;    if (((Number.parseInt(testQn) === qn_num) &amp;&amp; (control_scores.slice((- 1))[0] !== 1))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;for (var qn_num, _pj_c = 0, _pj_a = [4, 5], _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    qn_num = _pj_a[_pj_c];&amp;#10;    if ((((Number.parseInt(testQn) === qn_num) &amp;&amp; (control_scores.slice((- 1))[0] !== 1)) &amp;&amp; (control_scores.slice((- 2))[0] !== 1))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;trials.addData(&quot;expVersion&quot;, expVersion)&amp;#10;&amp;#10;cimgs = None&amp;#10;cimg_names = []&amp;#10;mouse_over = &quot;_&quot;&amp;#10;slide_t = 0&amp;#10;response = None&amp;#10;response_time = None&amp;#10;&amp;#10;slide_name = ''&amp;#10;&amp;#10;slide_nums = SLIDE_GROUPS[int(trialNum)]&amp;#10;slides = []&amp;#10;for i in slide_nums: &amp;#10;    i = i if i &gt; 9 else f&quot;0{i}&quot;&amp;#10;    if i == 301:&amp;#10;        i = '03b'&amp;#10;    slide_name = f&quot;slide-{i}&quot;  &amp;#10;    slides.append(make_slide(slide_name))&amp;#10;&amp;#10;n_slides = len(slide_nums)&amp;#10;idx = 0&amp;#10;idx_prev = None&amp;#10;slides[idx].autoDraw = True&amp;#10;&amp;#10;NEXT_BUTTON.pos = NEXT_BUTTON_POS&amp;#10;NEXT_BUTTON.opacity = 1 if n_slides &gt; 1 else 0.1&amp;#10;NEXT_BUTTON.autoDraw = True&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    play_6b_once = True&amp;#10;    auto_9_once = True&amp;#10;    aud_file = f&quot;{AUD_DIR}/{slides[idx].name}.m4a&quot;&amp;#10;    SOUND = make_sound(slides[idx].name, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND_T = 0&amp;#10;    SOUND.play()&amp;#10;&amp;#10;for qn_num in [2, 6, 7]:&amp;#10;    if int(testQn) == qn_num \&amp;#10;    and control_scores[-1] != 1:&amp;#10;        continueRoutine = False  # Skip test qn&amp;#10;&amp;#10;for qn_num in [4, 5]:&amp;#10;    if int(testQn) == qn_num \&amp;#10;    and control_scores[-1] != 1 \&amp;#10;    and control_scores[-2] != 1:&amp;#10;        continueRoutine = False  # Skip test qn&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="&amp;#10;# Workarounds&amp;#10;if USE_AUDIO:&amp;#10;    if play_6b_once \&amp;#10;    and slides[idx].name == &quot;slide-06&quot; \&amp;#10;    and t - SOUND_T &gt; SOUND_DUR:&amp;#10;        play_6b_once = False&amp;#10;        aud_file = f&quot;{AUD_DIR}/{slides[idx].name}b.m4a&quot;&amp;#10;        SOUND = make_sound(slides[idx].name, aud_file)&amp;#10;        SOUND_DUR = SOUND.getDuration()&amp;#10;        SOUND_T = t&amp;#10;        SOUND.play()&amp;#10;    if auto_9_once \&amp;#10;    and slides[idx].name == &quot;slide-08&quot; \&amp;#10;    and t - SOUND_T &gt; 8:&amp;#10;        auto_9_once = False&amp;#10;        idx_prev = idx&amp;#10;        idx += 1&amp;#10;        slides[idx_prev].autoDraw = False&amp;#10;        slides[idx].autoDraw = True&amp;#10;        NEXT_BUTTON.autoDraw = False&amp;#10;        NEXT_BUTTON.autoDraw = True&amp;#10;        NEXT_BUTTON.opacity = 0.1&amp;#10;        if n_slides - idx != 1:&amp;#10;            NEXT_BUTTON.opacity = 1&amp;#10;&amp;#10;# Last slide in series will contain the options&amp;#10;if cimgs is None and n_slides - idx == 1:&amp;#10;    slide_t = t&amp;#10;    cimgs = q_slides[slides[idx].name]()&amp;#10;    y_offset = -0.02&amp;#10;    if slides[idx].name == &quot;slide-03&quot;:&amp;#10;        y_offset = 0.02&amp;#10;    for i in [20, 23, 24]:&amp;#10;        if slides[idx].name == f&quot;slide-{i}&quot;:&amp;#10;            y_offset = -0.01&amp;#10;            break&amp;#10;    radio0s = make_radios(make_radio0, cimgs[:2], [], y_offset)&amp;#10;    radio0s = make_radios(make_radio0, cimgs[2:], radio0s, y_offset)&amp;#10;    radio1s = make_radios(make_radio1, cimgs[:2], [], y_offset)&amp;#10;    radio1s = make_radios(make_radio1, cimgs[2:], radio1s, y_offset)&amp;#10;    for i in range(len(cimgs)):&amp;#10;        radio0s[i].autoDraw = True&amp;#10;        cimgs[i].autoDraw = True&amp;#10;        cimg_names.append(cimgs[i].name)&amp;#10;&amp;#10;# Detect valid click from scratch&amp;#10;MOUSE_L = MOUSE.getPressed()[0]&amp;#10;if MOUSE_L_prev != MOUSE_L:&amp;#10;    MOUSE_L_prev = MOUSE_L&amp;#10;    if MOUSE_L == 1:&amp;#10;        if n_slides - idx == 1:&amp;#10;            if response is not None and NEXT_BUTTON.contains(MOUSE):&amp;#10;                continueRoutine = False&amp;#10;            for i in range(len(cimgs)):&amp;#10;                if cimgs[i].contains(MOUSE) or radio0s[i].contains(MOUSE):&amp;#10;                    response = cimgs[i].name&amp;#10;                    response_time = t - slide_t&amp;#10;                    NEXT_BUTTON.opacity = 1&amp;#10;                for radio in radio1s:&amp;#10;                    radio.autoDraw = False&amp;#10;                    if response == radio.name:&amp;#10;                        radio.autoDraw = True&amp;#10;        elif NEXT_BUTTON.contains(MOUSE):&amp;#10;            idx_prev = idx&amp;#10;            idx += 1&amp;#10;            slides[idx_prev].autoDraw = False&amp;#10;            slides[idx].autoDraw = True&amp;#10;            if USE_AUDIO and slides[idx].name != &quot;slide-09&quot;:&amp;#10;                if t - SOUND_T &lt; SOUND_DUR:&amp;#10;                    SOUND.stop()&amp;#10;                aud_file = f&quot;{AUD_DIR}/{slides[idx].name}.m4a&quot;&amp;#10;                SOUND = make_sound(slides[idx].name, aud_file)&amp;#10;                SOUND_DUR = SOUND.getDuration()&amp;#10;                SOUND_T = t&amp;#10;                SOUND.play()&amp;#10;            NEXT_BUTTON.autoDraw = False&amp;#10;            NEXT_BUTTON.autoDraw = True&amp;#10;            NEXT_BUTTON.opacity = 0.1&amp;#10;            if n_slides - idx != 1:&amp;#10;                NEXT_BUTTON.opacity = 1&amp;#10;&amp;#10;# TODO: &quot;Back&quot; button&amp;#10;&amp;#10;mouse_over = &quot;_&quot;&amp;#10;if cimgs is not None:&amp;#10;    for cimg in cimgs:&amp;#10;        if cimg.contains(MOUSE):&amp;#10;            mouse_over = cimg.name&amp;#10;            cimg.opacity = BOUND_BOX_OPACITY&amp;#10;        else:&amp;#10;            cimg.opacity = CLICK_BOX_OPACITY&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    trial_text.text = f&quot;&quot;&quot;&amp;#10;taskNum = {taskNum}&amp;#10;qnNum = {qnNum}&amp;#10;aud_file = {aud_file}&amp;#10;SOUND_DUR = {round(SOUND_DUR, 3)}&amp;#10;slides[{idx}].name = {slides[idx].name}&amp;#10;cimg_names = {cimg_names}&amp;#10;corrAns1 = {corrAns1}&amp;#10;response = {response}&amp;#10;mouse_over = {mouse_over}&amp;#10;response_time = {round(response_time, 3)}&amp;#10;t = {round(t, 3)}&amp;#10;current_total_score = {current_total_score}&amp;#10;&quot;&quot;&quot;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (USE_AUDIO) {&amp;#10;    if (((play_6b_once &amp;&amp; (slides[idx].name === &quot;slide-06&quot;)) &amp;&amp; ((t - SOUND_T) &gt; SOUND_DUR))) {&amp;#10;        play_6b_once = false;&amp;#10;        aud_file = `${AUD_DIR}/${slides[idx].name}b.m4a`;&amp;#10;        SOUND = make_sound(slides[idx].name, aud_file);&amp;#10;        SOUND_DUR = SOUND.getDuration();&amp;#10;        SOUND_T = t;&amp;#10;        SOUND.play();&amp;#10;    }&amp;#10;    if (((auto_9_once &amp;&amp; (slides[idx].name === &quot;slide-08&quot;)) &amp;&amp; ((t - SOUND_T) &gt; 8))) {&amp;#10;        auto_9_once = false;&amp;#10;        idx_prev = idx;&amp;#10;        idx += 1;&amp;#10;        slides[idx_prev].autoDraw = false;&amp;#10;        slides[idx].autoDraw = true;&amp;#10;        NEXT_BUTTON.autoDraw = false;&amp;#10;        NEXT_BUTTON.autoDraw = true;&amp;#10;        NEXT_BUTTON.opacity = 0.1;&amp;#10;        if (((n_slides - idx) !== 1)) {&amp;#10;            NEXT_BUTTON.opacity = 1;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (((cimgs === null) &amp;&amp; ((n_slides - idx) === 1))) {&amp;#10;    slide_t = t;&amp;#10;    cimgs = q_slides[slides[idx].name]();&amp;#10;    y_offset = (- 0.02);&amp;#10;    if ((slides[idx].name === &quot;slide-03&quot;)) {&amp;#10;        y_offset = 0.02;&amp;#10;    }&amp;#10;    for (var i, _pj_c = 0, _pj_a = [20, 23, 24], _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        if ((slides[idx].name === `slide-${i}`)) {&amp;#10;            y_offset = (- 0.01);&amp;#10;            break;&amp;#10;        }&amp;#10;    }&amp;#10;    radio0s = make_radios(make_radio0, cimgs.slice(0, 2), [], y_offset);&amp;#10;    radio0s = make_radios(make_radio0, cimgs.slice(2), radio0s, y_offset);&amp;#10;    radio1s = make_radios(make_radio1, cimgs.slice(0, 2), [], y_offset);&amp;#10;    radio1s = make_radios(make_radio1, cimgs.slice(2), radio1s, y_offset);&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(cimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        radio0s[i].autoDraw = true;&amp;#10;        cimgs[i].autoDraw = true;&amp;#10;        cimg_names.push(cimgs[i].name);&amp;#10;    }&amp;#10;}&amp;#10;MOUSE_L = MOUSE.getPressed()[0];&amp;#10;if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;    MOUSE_L_prev = MOUSE_L;&amp;#10;    if ((MOUSE_L === 1)) {&amp;#10;        if (((n_slides - idx) === 1)) {&amp;#10;            if (((response !== null) &amp;&amp; NEXT_BUTTON.contains(MOUSE))) {&amp;#10;                continueRoutine = false;&amp;#10;            }&amp;#10;            for (var i, _pj_c = 0, _pj_a = util.range(cimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                i = _pj_a[_pj_c];&amp;#10;                if ((cimgs[i].contains(MOUSE) || radio0s[i].contains(MOUSE))) {&amp;#10;                    response = cimgs[i].name;&amp;#10;                    response_time = (t - slide_t);&amp;#10;                    NEXT_BUTTON.opacity = 1;&amp;#10;                }&amp;#10;                for (var radio, _pj_f = 0, _pj_d = radio1s, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;                    radio = _pj_d[_pj_f];&amp;#10;                    radio.autoDraw = false;&amp;#10;                    if ((response === radio.name)) {&amp;#10;                        radio.autoDraw = true;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        } else {&amp;#10;            if (NEXT_BUTTON.contains(MOUSE)) {&amp;#10;                idx_prev = idx;&amp;#10;                idx += 1;&amp;#10;                slides[idx_prev].autoDraw = false;&amp;#10;                slides[idx].autoDraw = true;&amp;#10;                if ((USE_AUDIO &amp;&amp; (slides[idx].name !== &quot;slide-09&quot;))) {&amp;#10;                    if (((t - SOUND_T) &lt; SOUND_DUR)) {&amp;#10;                        SOUND.stop();&amp;#10;                    }&amp;#10;                    aud_file = `${AUD_DIR}/${slides[idx].name}.m4a`;&amp;#10;                    SOUND = make_sound(slides[idx].name, aud_file);&amp;#10;                    SOUND_DUR = SOUND.getDuration();&amp;#10;                    SOUND_T = t;&amp;#10;                    SOUND.play();&amp;#10;                }&amp;#10;                NEXT_BUTTON.autoDraw = false;&amp;#10;                NEXT_BUTTON.autoDraw = true;&amp;#10;                NEXT_BUTTON.opacity = 0.1;&amp;#10;                if (((n_slides - idx) !== 1)) {&amp;#10;                    NEXT_BUTTON.opacity = 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;mouse_over = &quot;_&quot;;&amp;#10;if ((cimgs !== null)) {&amp;#10;    for (var cimg, _pj_c = 0, _pj_a = cimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        cimg = _pj_a[_pj_c];&amp;#10;        if (cimg.contains(MOUSE)) {&amp;#10;            mouse_over = cimg.name;&amp;#10;            cimg.opacity = BOUND_BOX_OPACITY;&amp;#10;        } else {&amp;#10;            cimg.opacity = CLICK_BOX_OPACITY;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    trial_text.text = `&amp;#10;taskNum = ${taskNum}&amp;#10;qnNum = ${qnNum}&amp;#10;aud_file = ${aud_file}&amp;#10;SOUND_DUR = ${round(SOUND_DUR, 3)}&amp;#10;slides[${idx}].name = ${slides[idx].name}&amp;#10;cimg_names = ${cimg_names}&amp;#10;corrAns1 = ${corrAns1}&amp;#10;response = ${response}&amp;#10;mouse_over = ${mouse_over}&amp;#10;response_time = ${round(response_time, 3)}&amp;#10;t = ${round(t, 3)}&amp;#10;current_total_score = ${current_total_score}`&amp;#10;;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="for (var cimg, _pj_c = 0, _pj_a = cimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    cimg = _pj_a[_pj_c];&amp;#10;    cimg.size = [0, 0];&amp;#10;    cimg.autoDraw = false;&amp;#10;}&amp;#10;slides[idx].size = [0, 0];&amp;#10;slides[idx].autoDraw = false;&amp;#10;NEXT_BUTTON.autoDraw = false;&amp;#10;if (USE_AUDIO) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;is_correct = ((response === corrAns1) ? 1 : 0);&amp;#10;if (((is_correct !== 1) &amp;&amp; (corrAns2 !== &quot;NA&quot;))) {&amp;#10;    is_correct = ((response === corrAns2) ? 1 : 0);&amp;#10;}&amp;#10;trials.addData(&quot;response&quot;, response);&amp;#10;if ((controlQn !== &quot;NA&quot;)) {&amp;#10;    control_scores.push(is_correct);&amp;#10;    trials.addData(&quot;control_score&quot;, is_correct);&amp;#10;    trials.addData(&quot;test_score&quot;, null);&amp;#10;    trials.addData(&quot;current_total_score&quot;, null);&amp;#10;}&amp;#10;if ((testQn !== &quot;NA&quot;)) {&amp;#10;    current_total_score += is_correct;&amp;#10;    trials.addData(&quot;control_score&quot;, null);&amp;#10;    trials.addData(&quot;test_score&quot;, is_correct);&amp;#10;    trials.addData(&quot;current_total_score&quot;, current_total_score);&amp;#10;}&amp;#10;trials.addData(&quot;response_time&quot;, response_time);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="&amp;#10;for cimg in cimgs:&amp;#10;    cimg.size = (0, 0)&amp;#10;    cimg.autoDraw = False&amp;#10;&amp;#10;slides[idx].size = (0, 0)&amp;#10;slides[idx].autoDraw = False&amp;#10;NEXT_BUTTON.autoDraw = False&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    SOUND.stop()&amp;#10;&amp;#10;is_correct = 1 if response == corrAns1 else 0&amp;#10;if is_correct != 1 and corrAns2 != &quot;NA&quot;:&amp;#10;    is_correct = 1 if response == corrAns2 else 0&amp;#10;&amp;#10;trials.addData(&quot;response&quot;, response)&amp;#10;if controlQn != &quot;NA&quot;:&amp;#10;    control_scores.append(is_correct)&amp;#10;    trials.addData(&quot;control_score&quot;, is_correct)&amp;#10;    trials.addData(&quot;test_score&quot;, None)  # For column order&amp;#10;    trials.addData(&quot;current_total_score&quot;, None)  # For column order&amp;#10;if testQn != &quot;NA&quot;:&amp;#10;    current_total_score += is_correct&amp;#10;    trials.addData(&quot;control_score&quot;, None)  # For column order&amp;#10;    trials.addData(&quot;test_score&quot;, is_correct)&amp;#10;    trials.addData(&quot;current_total_score&quot;, current_total_score)&amp;#10;trials.addData(&quot;response_time&quot;, response_time)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="trial_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="trial_anim">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="aimgs = None &amp;#10;starts = None &amp;#10;ends = None  &amp;#10;&amp;#10;def anim_03b(): &amp;#10;    # Slide 03b&amp;#10;    #names = [&quot;box_pattern&quot;, &quot;box_options&quot;] &amp;#10;    #xys = [(0.015, 0.15), (0, -0.22)] &amp;#10;    #sizes = [(0.22, 0.25), (0.9, 0.30)] &amp;#10;    #start_times = [2, 6] &amp;#10;    #end_times = [5, 8]&amp;#10;    &amp;#10;    names = [&quot;box_pattern&quot;] &amp;#10;    xys = [(-0.009, 0.19)] &amp;#10;    sizes = [(0.5, 0.26)]&amp;#10;    start_times = [2] &amp;#10;    end_times = [5]&amp;#10;    return make_boxes(names, xys, sizes, 1, &quot;red&quot;), start_times, end_times&amp;#10;    &amp;#10;all_anims = {&amp;#10;    &quot;slide-03b&quot;: anim_03b,&amp;#10;   &amp;#10;}&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="aimgs = null;&amp;#10;starts = null;&amp;#10;ends = null;&amp;#10;function anim_03b() {&amp;#10;    var end_times, names, sizes, start_times, xys;&amp;#10;    names = [&quot;box_pattern&quot;];&amp;#10;    xys = [[(- 0.009), 0.19]];&amp;#10;    sizes = [[0.5, 0.26]];&amp;#10;    start_times = [2];&amp;#10;    end_times = [5];&amp;#10;    return [make_boxes(names, xys, sizes, 1, &quot;red&quot;), start_times, end_times];&amp;#10;}&amp;#10;all_anims = {&quot;slide-03b&quot;: anim_03b};&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;key = slide_name;&amp;#10;if ((USE_AUDIO &amp;&amp; _pj.in_es6(key, all_anims))) {&amp;#10;    run_anim = true;&amp;#10;    if ((key === &quot;slide-03b&quot;)) {&amp;#10;        [aimgs, starts, ends] = all_anims[key]();&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;key = slide_name&amp;#10;&amp;#10;if USE_AUDIO and key in all_anims: &amp;#10;    run_anim = True &amp;#10;    if key == 'slide-03b':&amp;#10;        aimgs, starts, ends = all_anims[key]()&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#if run_anim:&amp;#10;#    for i in range(len(aimgs)):&amp;#10;#        if t &gt;= starts[i]: &amp;#10;#            aimgs[i].autoDraw = True &amp;#10;#        if t &gt;= ends[i]: &amp;#10;#            aimgs[i].autoDraw = False&amp;#10;&amp;#10;if run_anim:&amp;#10;    for i in range(len(aimgs)):&amp;#10;        if t &gt;= starts[i]: &amp;#10;            aimgs[i].autoDraw = True &amp;#10;        if t &gt;= ends[i]: &amp;#10;            aimgs[i].autoDraw = False&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (run_anim) {&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(aimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        if ((t &gt;= starts[i])) {&amp;#10;            aimgs[i].autoDraw = true;&amp;#10;        }&amp;#10;        if ((t &gt;= ends[i])) {&amp;#10;            aimgs[i].autoDraw = false;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (run_anim) {&amp;#10;    run_anim = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if run_anim:&amp;#10;    run_anim = False&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="trial_anim" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="trial_text">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="num" updates="constant" name="letterHeight"/>
        <Param val="trial_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.6, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="begin">
      <CodeComponent name="begin_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;expVersion = &quot;2022.09.26&quot;&amp;#10;AUD_DIR = &quot;resources/aud&quot;&amp;#10;IMGS_DIR = &quot;resources/imgs&quot;&amp;#10;SLIDES_DIR = f&quot;{IMGS_DIR}/slides&quot;&amp;#10;SEQ_FILE = &quot;resources/seqs/conditions.csv&quot;&amp;#10;&amp;#10;SHOW_DEBUG = expInfo[&quot;Debug&quot;] == &quot;Yes&quot;&amp;#10;USE_AUDIO = expInfo[&quot;Audio&quot;] == &quot;Yes&quot;&amp;#10;SHOW_BOUND_BOX = expInfo[&quot;Show boxes&quot;] == &quot;Yes&quot;&amp;#10;&amp;#10;CLICK_BOX_OPACITY = 0.2 if SHOW_DEBUG else 0&amp;#10;BOUND_BOX_OPACITY = 1 if SHOW_BOUND_BOX else 0&amp;#10;&amp;#10;&quot;&quot;&quot;&amp;#10;Slides are 1001 x 563 pixels.&amp;#10;Positions and sizes of clickable areas are hard &amp;#10;coded, so changing this will break _everything_!&amp;#10;&amp;#10;&quot;&quot;&quot;&amp;#10;SLIDE_H = 0.75&amp;#10;SLIDE_W = SLIDE_H / 563 * 1001&amp;#10;SLIDE_SIZE = (SLIDE_W, SLIDE_H)&amp;#10;&amp;#10;# &quot;Next&quot; button&amp;#10;NEXT_POS = (0.573, 0.315)&amp;#10;#NEXT_POS = (0, -0.38)&amp;#10;#NEXT_POS = (0, -0.2)&amp;#10;&amp;#10;#NEXT_SIZE = (0.1 / 127 * 192, 0.1)  # 192 x 127&amp;#10;#NEXT_SIZE = (0.215, 0.1)&amp;#10;NEXT_SIZE = (0.165, 0.075)&amp;#10;NEXT = make_rect(&quot;next&quot;, NEXT_POS, NEXT_SIZE, CLICK_BOX_OPACITY);&amp;#10;&amp;#10;&amp;#10;#NEXT BUTTON&amp;#10;NEXT_BUTTON_POS = (0, -0.38)&amp;#10;#NEXT_BUTTON_SIZE = (0.215, 0.1)&amp;#10;NEXT_BUTTON_SIZE = (((0.1 / 127) * 192), 0.1)&amp;#10;NEXT_BUTTON = make_img(&quot;next&quot;, f&quot;{IMGS_DIR}/next.png&quot;, NEXT_POS, NEXT_SIZE, None)&amp;#10;&amp;#10;&amp;#10;# &quot;Replay&quot; button at top-left&amp;#10;REPLAY_POS = (-0.376, 0.265)&amp;#10;REPLAY_SIZE = (0.165, 0.075)&amp;#10;REPLAY = make_rect(&quot;replay&quot;, REPLAY_POS, REPLAY_SIZE, CLICK_BOX_OPACITY)&amp;#10;&amp;#10;# For covering &quot;Next&quot; button&amp;#10;COVER_SIZE = (0.17, 0.08)&amp;#10;COVER = make_rect(&quot;cover&quot;, NEXT_POS, COVER_SIZE, None, &quot;white&quot;, 0, &quot;white&quot;)&amp;#10;&amp;#10;# Global mouse&amp;#10;MOUSE = core.Mouse(win=win)&amp;#10;MOUSE_L = 0&amp;#10;MOUSE_L_prev = 0&amp;#10;&amp;#10;# Global sound&amp;#10;SOUND = None&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="expVersion = &quot;2022.09.26&quot;;&amp;#10;AUD_DIR = &quot;resources/aud&quot;;&amp;#10;IMGS_DIR = &quot;resources/imgs&quot;;&amp;#10;SLIDES_DIR = `${IMGS_DIR}/slides`;&amp;#10;SEQ_FILE = &quot;resources/seqs/conditions.csv&quot;;&amp;#10;SHOW_DEBUG = (expInfo[&quot;Debug&quot;] === &quot;Yes&quot;);&amp;#10;USE_AUDIO = (expInfo[&quot;Audio&quot;] === &quot;Yes&quot;);&amp;#10;SHOW_BOUND_BOX = (expInfo[&quot;Show boxes&quot;] === &quot;Yes&quot;);&amp;#10;CLICK_BOX_OPACITY = (SHOW_DEBUG ? 0.2 : 0);&amp;#10;BOUND_BOX_OPACITY = (SHOW_BOUND_BOX ? 1 : 0);&amp;#10;/*&amp;#10;Slides are 1001 x 563 pixels.&amp;#10;Positions and sizes of clickable areas are hard&amp;#10;coded, so changing this will break _everything_!&amp;#10;*/&amp;#10;SLIDE_H = 0.75;&amp;#10;SLIDE_W = ((SLIDE_H / 563) * 1001);&amp;#10;SLIDE_SIZE = [SLIDE_W, SLIDE_H];&amp;#10;NEXT_POS = [0.573, 0.315];&amp;#10;NEXT_SIZE = [0.165, 0.075];&amp;#10;NEXT = make_rect(&quot;next&quot;, NEXT_POS, NEXT_SIZE, CLICK_BOX_OPACITY);&amp;#10;NEXT_BUTTON_POS = [0, (- 0.38)];&amp;#10;NEXT_BUTTON_SIZE = [((0.1 / 127) * 192), 0.1];&amp;#10;NEXT_BUTTON = make_img(&quot;next&quot;, `${IMGS_DIR}/next.png`, NEXT_POS, NEXT_SIZE, null);&amp;#10;REPLAY_POS = [(- 0.376), 0.265];&amp;#10;REPLAY_SIZE = [0.165, 0.075];&amp;#10;REPLAY = make_rect(&quot;replay&quot;, REPLAY_POS, REPLAY_SIZE, CLICK_BOX_OPACITY);&amp;#10;COVER_SIZE = [0.17, 0.08];&amp;#10;COVER = make_rect(&quot;cover&quot;, NEXT_POS, COVER_SIZE, null, &quot;white&quot;, 0, &quot;white&quot;);&amp;#10;MOUSE = new core.Mouse({&quot;win&quot;: psychoJS.window});&amp;#10;MOUSE_L = 0;&amp;#10;MOUSE_L_prev = 0;&amp;#10;SOUND = null;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="slide = make_slide(`slide-00-intr`);&amp;#10;slide.autoDraw = true;&amp;#10;NEXT.autoDraw = true;&amp;#10;if (USE_AUDIO) {&amp;#10;    aud_file = `${AUD_DIR}/slide-00-intr.m4a`;&amp;#10;    SOUND = make_sound(&quot;slide-00-intr&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND_T = 0;&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="slide = make_slide(f&quot;slide-00-intr&quot;)&amp;#10;slide.autoDraw = True&amp;#10;&amp;#10;NEXT.autoDraw = True&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    aud_file = f&quot;{AUD_DIR}/slide-00-intr.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;slide-00-intr&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND_T = 0&amp;#10;    SOUND.play()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="&amp;#10;MOUSE_L = MOUSE.getPressed()[0]&amp;#10;if MOUSE_L_prev != MOUSE_L:&amp;#10;    MOUSE_L_prev = MOUSE_L&amp;#10;    if MOUSE_L == 1 and NEXT.contains(MOUSE):&amp;#10;        continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="MOUSE_L = MOUSE.getPressed()[0];&amp;#10;if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;    MOUSE_L_prev = MOUSE_L;&amp;#10;    if (((MOUSE_L === 1) &amp;&amp; NEXT.contains(MOUSE))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="slide.autoDraw = false;&amp;#10;NEXT.autoDraw = false;&amp;#10;NEXT.pos = NEXT_POS;&amp;#10;if (USE_AUDIO) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="&amp;#10;slide.autoDraw = False&amp;#10;NEXT.autoDraw = False&amp;#10;NEXT.pos = NEXT_POS&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    SOUND.stop()&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="begin_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="functions_g">
        <Param val="&amp;#10;def make_button(name, text, pos, size):&amp;#10;    return visual.ButtonStim(&amp;#10;        win=win, &amp;#10;        text=text,&amp;#10;    #    font=&quot;Arvo&quot;,&amp;#10;        pos=pos,&amp;#10;        letterHeight=0.05,&amp;#10;        size=size,&amp;#10;        borderWidth=0.005,&amp;#10;        fillColor=&quot;lightgrey&quot;,&amp;#10;        borderColor=&quot;darkgrey&quot;,&amp;#10;        color=&quot;black&quot;,&amp;#10;        colorSpace=&quot;rgb&quot;,&amp;#10;        opacity=None,&amp;#10;        bold=True,&amp;#10;        italic=False,&amp;#10;        padding=None,&amp;#10;        anchor=&quot;center&quot;,&amp;#10;        name=name&amp;#10;    )&amp;#10;&amp;#10;def make_sound(name, filepath):&amp;#10;    return sound.Sound(&amp;#10;        win=win,&amp;#10;        value=filepath,&amp;#10;        secs=-1,&amp;#10;        stereo=True,&amp;#10;        hamming=True,&amp;#10;        name=name&amp;#10;    )&amp;#10;&amp;#10;def make_img(name, file_name, pos, size, opacity):&amp;#10;    return visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name=name,&amp;#10;        image=file_name,&amp;#10;        pos=pos,&amp;#10;        size=size,&amp;#10;        opacity=opacity&amp;#10;    )&amp;#10;&amp;#10;def make_slide(name, pos=(0, 0), size=SLIDE_SIZE):&amp;#10;    return make_img(&amp;#10;        name,&amp;#10;        f&quot;{SLIDES_DIR}/{name}.png&quot;,&amp;#10;        pos, size, 1&amp;#10;    )&amp;#10;&amp;#10;def make_rect(&amp;#10;    name, pos, size, opacity,&amp;#10;    lineColor=&quot;green&quot;,&amp;#10;    lineWidth=3,&amp;#10;    fillColor=None&amp;#10;):&amp;#10;    if fillColor is not None:&amp;#10;        fillColor = util.Color(fillColor)&amp;#10;    if lineColor is not None:&amp;#10;        lineColor = util.Color(lineColor)&amp;#10;    return visual.Rect(&amp;#10;        win=win,&amp;#10;        name=name,&amp;#10;        width=size[0],&amp;#10;        height=size[1],&amp;#10;        pos=pos,&amp;#10;        lineWidth=lineWidth,&amp;#10;        lineColor=lineColor,&amp;#10;        fillColor=fillColor,&amp;#10;        opacity=opacity&amp;#10;    )&amp;#10;&amp;#10;def make_boxes(names, xys, sizes, opacity=CLICK_BOX_OPACITY, lineColor=&quot;green&quot;):&amp;#10;    cimgs = []&amp;#10;    for i in range(len(names)):&amp;#10;        cimgs.append(make_rect(names[i], xys[i], sizes[i], opacity, lineColor))&amp;#10;    return cimgs&amp;#10;&amp;#10;def make_circle(&amp;#10;    name, pos, size,&amp;#10;    fillColor=&quot;black&quot;,&amp;#10;    lineColor=&quot;black&quot;,&amp;#10;    lineWidth=3,&amp;#10;    opacity=1&amp;#10;):&amp;#10;    if lineColor is not None:&amp;#10;        lineColor = util.Color(lineColor)&amp;#10;    if fillColor is not None:&amp;#10;        fillColor = util.Color(fillColor)&amp;#10;    return visual.Polygon(&amp;#10;        win=win,&amp;#10;        name=name,&amp;#10;        edges=360,&amp;#10;        size=size,&amp;#10;        pos=pos,&amp;#10;        lineWidth=lineWidth,&amp;#10;        lineColor=lineColor,&amp;#10;        fillColor=fillColor,&amp;#10;        opacity=opacity&amp;#10;    )&amp;#10;&amp;#10;def make_radio0(name, pos):&amp;#10;    return make_circle(name, pos, (0.03, 0.03), None, &quot;black&quot;)&amp;#10;&amp;#10;def make_radio1(name, pos):&amp;#10;    return make_circle(name, pos, (0.023, 0.023), &quot;black&quot;, None, 0)&amp;#10;&amp;#10;def find_min_y(cimgs):&amp;#10;    min_y = 0.5&amp;#10;    for cimg in cimgs:&amp;#10;        y = cimg.pos[1] - (cimg.height / 2)&amp;#10;        if min_y &gt; y:&amp;#10;            min_y = y&amp;#10;    return min_y&amp;#10;&amp;#10;def make_radios(func, cimgs, res=[], offset=-0.05):&amp;#10;    min_y = find_min_y(cimgs)&amp;#10;    for cimg in cimgs:&amp;#10;        radio_y = min_y + offset&amp;#10;        res.append(func(cimg.name, (cimg.pos[0], radio_y)))&amp;#10;    return res&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="function make_button(name, text, pos, size) {&amp;#10;    return new visual.ButtonStim({&quot;win&quot;: psychoJS.window, &quot;text&quot;: text, &quot;pos&quot;: pos, &quot;letterHeight&quot;: 0.05, &quot;size&quot;: size, &quot;borderWidth&quot;: 0.005, &quot;fillColor&quot;: &quot;lightgrey&quot;, &quot;borderColor&quot;: &quot;darkgrey&quot;, &quot;color&quot;: &quot;black&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;bold&quot;: true, &quot;italic&quot;: false, &quot;padding&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;name&quot;: name});&amp;#10;}&amp;#10;function make_sound(name, filepath) {&amp;#10;    return new sound.Sound({&quot;win&quot;: psychoJS.window, &quot;value&quot;: filepath, &quot;secs&quot;: (- 1), &quot;stereo&quot;: true, &quot;hamming&quot;: true, &quot;name&quot;: name});&amp;#10;}&amp;#10;function make_img(name, file_name, pos, size, opacity) {&amp;#10;    return new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: name, &quot;image&quot;: file_name, &quot;pos&quot;: pos, &quot;size&quot;: size, &quot;opacity&quot;: opacity});&amp;#10;}&amp;#10;function make_slide(name, pos = [0, 0], size = SLIDE_SIZE) {&amp;#10;    return make_img(name, `${SLIDES_DIR}/${name}.png`, pos, size, 1);&amp;#10;}&amp;#10;function make_rect(name, pos, size, opacity, lineColor = &quot;green&quot;, lineWidth = 3, fillColor = null) {&amp;#10;    if ((fillColor !== null)) {&amp;#10;        fillColor = new util.Color(fillColor);&amp;#10;    }&amp;#10;    if ((lineColor !== null)) {&amp;#10;        lineColor = new util.Color(lineColor);&amp;#10;    }&amp;#10;    return new visual.Rect({&quot;win&quot;: psychoJS.window, &quot;name&quot;: name, &quot;width&quot;: size[0], &quot;height&quot;: size[1], &quot;pos&quot;: pos, &quot;lineWidth&quot;: lineWidth, &quot;lineColor&quot;: lineColor, &quot;fillColor&quot;: fillColor, &quot;opacity&quot;: opacity});&amp;#10;}&amp;#10;function make_boxes(names, xys, sizes, opacity = CLICK_BOX_OPACITY, lineColor = &quot;green&quot;) {&amp;#10;    var cimgs;&amp;#10;    cimgs = [];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(names.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        cimgs.push(make_rect(names[i], xys[i], sizes[i], opacity, lineColor));&amp;#10;    }&amp;#10;    return cimgs;&amp;#10;}&amp;#10;function make_circle(name, pos, size, fillColor = &quot;black&quot;, lineColor = &quot;black&quot;, lineWidth = 3, opacity = 1) {&amp;#10;    if ((lineColor !== null)) {&amp;#10;        lineColor = new util.Color(lineColor);&amp;#10;    }&amp;#10;    if ((fillColor !== null)) {&amp;#10;        fillColor = new util.Color(fillColor);&amp;#10;    }&amp;#10;    return new visual.Polygon({&quot;win&quot;: psychoJS.window, &quot;name&quot;: name, &quot;edges&quot;: 360, &quot;size&quot;: size, &quot;pos&quot;: pos, &quot;lineWidth&quot;: lineWidth, &quot;lineColor&quot;: lineColor, &quot;fillColor&quot;: fillColor, &quot;opacity&quot;: opacity});&amp;#10;}&amp;#10;function make_radio0(name, pos) {&amp;#10;    return make_circle(name, pos, [0.03, 0.03], null, &quot;black&quot;);&amp;#10;}&amp;#10;function make_radio1(name, pos) {&amp;#10;    return make_circle(name, pos, [0.023, 0.023], &quot;black&quot;, null, 0);&amp;#10;}&amp;#10;function find_min_y(cimgs) {&amp;#10;    var min_y, y;&amp;#10;    min_y = 0.5;&amp;#10;    for (var cimg, _pj_c = 0, _pj_a = cimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        cimg = _pj_a[_pj_c];&amp;#10;        y = (cimg.pos[1] - (cimg.height / 2));&amp;#10;        if ((min_y &gt; y)) {&amp;#10;            min_y = y;&amp;#10;        }&amp;#10;    }&amp;#10;    return min_y;&amp;#10;}&amp;#10;function make_radios(func, cimgs, res = [], offset = (- 0.05)) {&amp;#10;    var min_y, radio_y;&amp;#10;    min_y = find_min_y(cimgs);&amp;#10;    for (var cimg, _pj_c = 0, _pj_a = cimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        cimg = _pj_a[_pj_c];&amp;#10;        radio_y = (min_y + offset);&amp;#10;        res.push(func(cimg.name, [cimg.pos[0], radio_y]));&amp;#10;    }&amp;#10;    return res;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="functions_g" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="specs_TOM">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;# TOM&amp;#10;&amp;#10;def get_slide02():&amp;#10;    names = [&quot;cake&quot;, &quot;lollipop&quot;, &quot;cookie&quot;, &quot;chocolate_bar&quot;]&amp;#10;    xys = [(-0.13, 0.145), (0.0925, 0.1475), (-0.1375, -0.0625), (0.0825, -0.06125)]&amp;#10;    sizes = [(0.15, 0.13), (0.07, 0.14), (0.18, 0.08), (0.14, 0.09)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_slide03():&amp;#10;    #names = [&quot;happy&quot;, &quot;sad&quot;, &quot;scared&quot;, &quot;angry&quot;]&amp;#10;    #xys = [(-0.17, 0.15), (0.06, 0.15), (-0.17, -0.05), (0.06, -0.05)]&amp;#10;    #sizes = [(0.19, 0.19), (0.19, 0.19), (0.19, 0.19), (0.19, 0.19)]&amp;#10;    &amp;#10;    names = [&quot;scared&quot;, &quot;angry&quot;, &quot;happy&quot;, &quot;sad&quot;] &amp;#10;    xys = [(-0.16, 0.18), (0.126, 0.18), (-0.152, -0.103), (0.126, -0.105)]&amp;#10;    sizes = [(0.19, 0.288), (0.19, 0.288), (0.180, 0.270), (0.193, 0.278)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_slide03b(): &amp;#10;    &amp;#10;    names = [&quot;happy&quot;, &quot;angry&quot; ] &amp;#10;    xys = [ (-0.212, -0.153),(0.180, -0.143)]&amp;#10;    sizes = [ (0.19, 0.280), (0.196, 0.270)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_slide05():&amp;#10;    names = [&quot;table&quot;, &quot;chair&quot;, &quot;desk&quot;, &quot;drawer&quot;]&amp;#10;    xys = [(-0.1675, 0.155), (0.1125, 0.17), (-0.1675, -0.06), (0.13, -0.0525)]&amp;#10;    sizes = [(0.24, 0.12), (0.125, 0.21), (0.26, 0.13), (0.2, 0.14)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_slide11():&amp;#10;    names = [&quot;table&quot;, &quot;chair&quot;, &quot;desk&quot;, &quot;drawer&quot;]&amp;#10;    xys = [(-0.1275, 0.1425), (0.09, 0.15), (-0.125, -0.06), (0.095, -0.05)]&amp;#10;    sizes = [(0.19, 0.11), (0.11, 0.19), (0.205, 0.12), (0.14, 0.13)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_slide18():&amp;#10;    names = [&quot;train&quot;, &quot;wagon&quot;, &quot;truck&quot;, &quot;airplane&quot;]&amp;#10;    xys = [(-0.15, 0.205), (0.1675, 0.2025), (-0.16, -0.06), (0.17, -0.055)]&amp;#10;    sizes = [(0.34, 0.12), (0.23, 0.18), (0.2, 0.135), (0.245, 0.145)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_slide20():&amp;#10;    names = [&quot;happy&quot;, &quot;sad&quot;, &quot;scared&quot;, &quot;mad&quot;]&amp;#10;    xys = [(-0.14, 0.19), (0.13, 0.19), (-0.14, -0.06), (0.13, -0.06)]&amp;#10;    sizes = [(0.2, 0.23), (0.2, 0.23), (0.2, 0.23), (0.2, 0.23)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_slide22():&amp;#10;    names = [&quot;train&quot;, &quot;wagon&quot;, &quot;truck&quot;, &quot;airplane&quot;]&amp;#10;    xys = [(-0.16, 0.175), (0.155, 0.17), (-0.17, -0.09), (0.155, -0.085)]&amp;#10;    sizes = [(0.34, 0.12), (0.23, 0.18), (0.2, 0.135), (0.245, 0.145)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_slide23():&amp;#10;    names = [&quot;happy&quot;, &quot;sad&quot;, &quot;scared&quot;, &quot;mad&quot;]&amp;#10;    xys = [(-0.15, 0.185), (0.13, 0.185), (-0.15, -0.065), (0.13, -0.065)]&amp;#10;    sizes = [(0.2, 0.23), (0.2, 0.23), (0.2, 0.23), (0.2, 0.23)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;q_slides = {&amp;#10;    &quot;slide-02&quot;: get_slide02,&amp;#10;    &quot;slide-03&quot;: get_slide03,&amp;#10;    &quot;slide-03b&quot;: get_slide03b,&amp;#10;    &quot;slide-05&quot;: get_slide05,&amp;#10;    &quot;slide-11&quot;: get_slide11,&amp;#10;    &quot;slide-12&quot;: get_slide11,&amp;#10;    &quot;slide-13&quot;: get_slide11,&amp;#10;    &quot;slide-18&quot;: get_slide18,&amp;#10;    &quot;slide-19&quot;: get_slide18,&amp;#10;    &quot;slide-20&quot;: get_slide20,&amp;#10;    &quot;slide-22&quot;: get_slide22,&amp;#10;    &quot;slide-23&quot;: get_slide23,&amp;#10;    &quot;slide-24&quot;: get_slide23,&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="function get_slide02() {&amp;#10;    var names, sizes, xys;&amp;#10;    names = [&quot;cake&quot;, &quot;lollipop&quot;, &quot;cookie&quot;, &quot;chocolate_bar&quot;];&amp;#10;    xys = [[(- 0.13), 0.145], [0.0925, 0.1475], [(- 0.1375), (- 0.0625)], [0.0825, (- 0.06125)]];&amp;#10;    sizes = [[0.15, 0.13], [0.07, 0.14], [0.18, 0.08], [0.14, 0.09]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_slide03() {&amp;#10;    var names, sizes, xys;&amp;#10;    names = [&quot;scared&quot;, &quot;angry&quot;, &quot;happy&quot;, &quot;sad&quot;];&amp;#10;    xys = [[(- 0.16), 0.18], [0.126, 0.18], [(- 0.152), (- 0.103)], [0.126, (- 0.105)]];&amp;#10;    sizes = [[0.19, 0.288], [0.19, 0.288], [0.18, 0.27], [0.193, 0.278]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_slide03b() {&amp;#10;    var names, sizes, xys;&amp;#10;    names = [&quot;happy&quot;, &quot;angry&quot;];&amp;#10;    xys = [[(- 0.212), (- 0.153)], [0.18, (- 0.143)]];&amp;#10;    sizes = [[0.19, 0.28], [0.196, 0.27]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_slide05() {&amp;#10;    var names, sizes, xys;&amp;#10;    names = [&quot;table&quot;, &quot;chair&quot;, &quot;desk&quot;, &quot;drawer&quot;];&amp;#10;    xys = [[(- 0.1675), 0.155], [0.1125, 0.17], [(- 0.1675), (- 0.06)], [0.13, (- 0.0525)]];&amp;#10;    sizes = [[0.24, 0.12], [0.125, 0.21], [0.26, 0.13], [0.2, 0.14]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_slide11() {&amp;#10;    var names, sizes, xys;&amp;#10;    names = [&quot;table&quot;, &quot;chair&quot;, &quot;desk&quot;, &quot;drawer&quot;];&amp;#10;    xys = [[(- 0.1275), 0.1425], [0.09, 0.15], [(- 0.125), (- 0.06)], [0.095, (- 0.05)]];&amp;#10;    sizes = [[0.19, 0.11], [0.11, 0.19], [0.205, 0.12], [0.14, 0.13]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_slide18() {&amp;#10;    var names, sizes, xys;&amp;#10;    names = [&quot;train&quot;, &quot;wagon&quot;, &quot;truck&quot;, &quot;airplane&quot;];&amp;#10;    xys = [[(- 0.15), 0.205], [0.1675, 0.2025], [(- 0.16), (- 0.06)], [0.17, (- 0.055)]];&amp;#10;    sizes = [[0.34, 0.12], [0.23, 0.18], [0.2, 0.135], [0.245, 0.145]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_slide20() {&amp;#10;    var names, sizes, xys;&amp;#10;    names = [&quot;happy&quot;, &quot;sad&quot;, &quot;scared&quot;, &quot;mad&quot;];&amp;#10;    xys = [[(- 0.14), 0.19], [0.13, 0.19], [(- 0.14), (- 0.06)], [0.13, (- 0.06)]];&amp;#10;    sizes = [[0.2, 0.23], [0.2, 0.23], [0.2, 0.23], [0.2, 0.23]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_slide22() {&amp;#10;    var names, sizes, xys;&amp;#10;    names = [&quot;train&quot;, &quot;wagon&quot;, &quot;truck&quot;, &quot;airplane&quot;];&amp;#10;    xys = [[(- 0.16), 0.175], [0.155, 0.17], [(- 0.17), (- 0.09)], [0.155, (- 0.085)]];&amp;#10;    sizes = [[0.34, 0.12], [0.23, 0.18], [0.2, 0.135], [0.245, 0.145]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_slide23() {&amp;#10;    var names, sizes, xys;&amp;#10;    names = [&quot;happy&quot;, &quot;sad&quot;, &quot;scared&quot;, &quot;mad&quot;];&amp;#10;    xys = [[(- 0.15), 0.185], [0.13, 0.185], [(- 0.15), (- 0.065)], [0.13, (- 0.065)]];&amp;#10;    sizes = [[0.2, 0.23], [0.2, 0.23], [0.2, 0.23], [0.2, 0.23]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;q_slides = {&quot;slide-02&quot;: get_slide02, &quot;slide-03&quot;: get_slide03, &quot;slide-03b&quot;: get_slide03b, &quot;slide-05&quot;: get_slide05, &quot;slide-11&quot;: get_slide11, &quot;slide-12&quot;: get_slide11, &quot;slide-13&quot;: get_slide11, &quot;slide-18&quot;: get_slide18, &quot;slide-19&quot;: get_slide18, &quot;slide-20&quot;: get_slide20, &quot;slide-22&quot;: get_slide22, &quot;slide-23&quot;: get_slide23, &quot;slide-24&quot;: get_slide23};&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="specs_TOM" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="begin_text">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="num" updates="constant" name="letterHeight"/>
        <Param val="begin_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.6, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="slide_title">
      <CodeComponent name="slide_title_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#for title slide and 1st trial slide&amp;#10;#NEXT_BUTTON_POS = (0, -0.2)&amp;#10;&amp;#10;#for trial slides&amp;#10;NEXT_BUTTON_POS = (0, -0.38)&amp;#10;#NEXT_BUTTON_SIZE = (0.215, 0.1)&amp;#10;NEXT_BUTTON_SIZE = (((0.1 / 127) * 192), 0.1)&amp;#10;NEXT_BUTTON = make_img(&quot;next&quot;, f&quot;{IMGS_DIR}/next.png&quot;, NEXT_POS, NEXT_SIZE, None)&amp;#10;#NEXT_BUTTON = make_button(&quot;next&quot;, &quot;Next&quot;, NEXT_BUTTON_POS, NEXT_BUTTON_SIZE)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="NEXT_BUTTON_POS = [0, (- 0.38)];&amp;#10;NEXT_BUTTON_SIZE = [((0.1 / 127) * 192), 0.1];&amp;#10;NEXT_BUTTON = make_img(&quot;next&quot;, `${IMGS_DIR}/next.png`, NEXT_POS, NEXT_SIZE, null);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="slide = make_slide(`slide-00-title`);&amp;#10;slide.autoDraw = true;&amp;#10;NEXT_BUTTON.pos = [0, (- 0.2)];&amp;#10;NEXT_BUTTON.autoDraw = true;&amp;#10;if (USE_AUDIO) {&amp;#10;    aud_file = `${AUD_DIR}/slide-00-title.m4a`;&amp;#10;    SOUND = make_sound(&quot;slide-00-title&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND_T = 0;&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;slide = make_slide(f&quot;slide-00-title&quot;)&amp;#10;slide.autoDraw = True&amp;#10;&amp;#10;NEXT_BUTTON.pos= (0, -0.2)&amp;#10;NEXT_BUTTON.autoDraw = True&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    aud_file = f&quot;{AUD_DIR}/slide-00-title.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;slide-00-title&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND_T = 0&amp;#10;    SOUND.play()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="&amp;#10;MOUSE_L = MOUSE.getPressed()[0]&amp;#10;if MOUSE_L_prev != MOUSE_L:&amp;#10;    MOUSE_L_prev = MOUSE_L&amp;#10;    if MOUSE_L == 1 and NEXT_BUTTON.contains(MOUSE):&amp;#10;        continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="MOUSE_L = MOUSE.getPressed()[0];&amp;#10;if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;    MOUSE_L_prev = MOUSE_L;&amp;#10;    if (((MOUSE_L === 1) &amp;&amp; NEXT_BUTTON.contains(MOUSE))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="slide.autoDraw = false;&amp;#10;NEXT_BUTTON.autoDraw = false;&amp;#10;if (USE_AUDIO) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="&amp;#10;slide.autoDraw = False&amp;#10;NEXT_BUTTON.autoDraw = False&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    SOUND.stop()&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="slide_title_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="slide_title_text">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slide_title_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.6, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="begin"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="0:" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$SEQ_FILE" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
